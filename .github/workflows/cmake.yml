name: Build

on:
  workflow_dispatch:
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        # os: [windows-latest, ubuntu-latest, macos-latest, macos-13]
        # type: [Debug, RelWithDebInfo, MinSizeRel, Release]
        # compiler: [default, clang, gcc]
        include:
          - os: windows-latest
            compiler: default
            type: Release
          - os: ubuntu-latest
            compiler: gcc
            type: Release
          - os: macos-latest
            compiler: default
            type: Release

    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Create build environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Setup dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install -y gcc-10 g++-10 clang tcc libgl1-mesa-dev \
        libasound2-dev libfontconfig1-dev libxmu-dev libxi-dev libgl-dev \
        libxrandr-dev libxinerama-dev xorg-dev xorg-dev libglu1-mesa-dev \
        libssl-dev

    - name: Configure CMake with default compiler
      shell: bash
      if: matrix.compiler == 'default'
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.type }}

    - name: Configure CMake with GCC (Ubuntu)
      shell: bash
      if: matrix.compiler == 'gcc' && startsWith(matrix.os, 'ubuntu')
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10

    - name: Configure CMake with Clang (Ubuntu)
      shell: bash
      if: (matrix.compiler == 'clang') && startsWith(matrix.os, 'ubuntu')
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: Configure CMake with Clang (Windows)
      shell: bash
      if: (matrix.compiler == 'clang') && startsWith(matrix.os, 'windows')
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.type }} -T ClangCL

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.type }}

    - name: Package (ZIP)
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cpack -G ZIP

    - name: Package (macOS DMG)
      working-directory: ${{github.workspace}}/build
      shell: bash
      if: startsWith(matrix.os, 'macos')
      run: cpack -G DragNDrop

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/')
      with:
        compression-level: 0
        retention-days: 3
        name: bin-${{ matrix.os }}-${{ matrix.type }}
        path: |
          ${{ github.workspace }}/build/*.zip
          ${{ github.workspace }}/build/*.dmg

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        files: |
          ${{ github.workspace }}/build/*.zip
          ${{ github.workspace }}/build/*.dmg
